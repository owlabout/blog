{"title":"Command Line Basics","metadata":{"slug":"basics","link":"/posts/2019/07/basics","dateString":"08.07.2019","date":"2019-07-08T00:00:00.000Z","author":"Lukas","lang":"en","thumbnail":"assets/7a45323072.svg","title":"Command Line Basics","tags":["terminal"],"file":"posts/terminal/basics.md"},"html":"<div class=\"hero__container\"  style='--color-hero: #2779b0;'><p><img src=\"assets/7a45323072.svg\" alt=\"Terminal Screenshot with an Illustration Person pointing at it\"></p>\n</div><h1>Command Line Basics</h1>\n<blockquote>\n<p>learn enough command line to be dangerous</p>\n</blockquote>\n<p>A sentence I remembered while trying to come up with an intro to this post. Because the question is, with all the beautiful graphical interfaces, why on earth would anyone want to learn using the command line?</p>\n<p>So I remembered this sentence and googled it trying to understand to find the source and maybe a quotable explanation. This is what came up:</p>\n<blockquote>\n<p>&quot;Enough to be dangerous&quot; means that you know enough to make big (potentially dangerous) decisions or actions, but don't have enough experience to know when such activity is advised and when it should be avoided.\n<a href=\"https://ell.stackexchange.com/questions/124321/what-is-the-meaning-of-the-phrase-to-be-dangerous\">1</a></p>\n</blockquote>\n<p>This seemed curious. I had thought more along the lines of &quot;know enough to be dangerous <strong>to others</strong>&quot;. E.g. having these amazing skills, no one can stop me hacking them.</p>\n<p>But this basically says there is a level of skill where you are able and maybe even likely to fuck up.</p>\n<p>So the motto should be <strong>Learn enough command line not to be dangerous (to yourself).</strong></p>\n<h2>Why?</h2>\n<p>The question remains: Why bother to learn the CLI? For me there are a bunch of reasons.</p>\n<ol>\n<li>Sometimes there is no way around it. Some tools and programs do not have a graphical interface and most servers definitely don't have them.</li>\n<li>It's more efficient once you get used to it. This might not be the case in the beginning.</li>\n<li>It looks cool, especially when surrounded by the right people. Your brother the lawyer might be very impressed with all that complex computer stuff.</li>\n<li>It's easier than you'd expect.</li>\n</ol>\n<h2>Goals</h2>\n<p>So then, what are the goals? Number one is trying not to fuck up your system.\nSecond, learn some basic commands to navigate the command line.\nAnd last but not least, know where to find more information.</p>\n<h2>Steps</h2>\n<p>Endangering yourself might happen faster than you think. And there are some basic rules, which can help prevent it.</p>\n<p><strong>Rule 1: Do not <a href=\"https://twitter.com/SylvainPV/status/1147106980542242816\">copy and paste</a></strong></p>\n<p>This might not be super intuitiv, considering that we have become accustomed to googling absolutely everything all the time. Especially with command line, where you will never be able to remember all the commands and options anyway, it seems like the path of least resistance. If you have already found it, why not just copy and paste?</p>\n<p>The obvious danger is not understanding the code you copy. So rule #2 is more rational.</p>\n<p><strong>Rule 2: Understand the code you execute</strong></p>\n<p>Do not execute code you don't understand. Especially not with sudo/administrator permissions. Most of the code you come accross will probably be perfectly safe. But you never know, so don' trust people on the interwebz.</p>\n<p>So when you find some snippet of code or commands, try to understand what it does before running it.</p>\n<p>If there are commands that are new to you, learn about them beforehand. For example using <a href=\"https://explainshell.com/\">explainshell.com</a>, <a href=\"https://en.wikipedia.org/wiki/Man_page\">man pages</a> or <a href=\"https://github.com/tldr-pages/tldr\">tldr</a>.</p>\n<p>Back to rule #1. Now you understood the code, why not just copy/paste it? The reason is basically <a href=\"https://en.wikipedia.org/wiki/Unicode\">unicode</a>. More specifically, the code might not be what it seems. If you haven't yet tried the <a href=\"https://twitter.com/SylvainPV/status/1147106980542242816\">example</a>, copy and paste it to the devtools of your browser.</p>\n<pre><code class=\"language-js\"><span class=\"token function-variable function\">rеturn</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/u.{8}/g</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">innocentHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   rеturn <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">󠅡󠅬󠅥󠅲󠅴󠄨󠄢󠄰󠅷󠅎󠅥󠅄󠄠󠅢󠅙󠄠󠅈󠄴󠅣󠅫󠄳󠅲󠅚󠄠󠄢󠄩󠄻󠄊Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>who<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">innocentHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Surprised? I was. I still haven't fully figured out what's going on there. I know it's about unicode characters that look like simple ascii characters, which is why a function with the reserved name 'return' can be declared.</p>\n<p><strong>Rule 3: make backups</strong></p>\n<p>Even if you do (or think you do) understand the code you're running. Something might go wrong. So just in case, make backups beforehand. E.g. of files you are changing. Or better yet, just have backups of your whole system.</p>\n<p>With these three rules you should be fairly safe to just go and try things out.</p>\n<h2>Commands</h2>\n<p>For most things you probably will and should google anyway, so I will just provide a list and short explanation of commands I remember from the top of my head. (Which means I use them pretty often.)</p>\n<p>The basic structure of a bash command is <code>command [subcommand] [options/flags] arguments</code>.</p>\n<p>Things surrounded with brackets are usually optional.\nMost commands provide information to help you, when passed a <code>--help</code> flag</p>\n<p>When you type a command and press <code>tab</code> you will get auto-completion, this also works for files and directories.</p>\n<p>Some commands open a terminal-based editor or pager to show text files.\nThere are different ones, most widely availabe are <a href=\"https://en.wikipedia.org/wiki/Less_(Unix)#Usage\">less</a>, vi and nano.</p>\n<p>When I first opened one, I did not know how to close it again.\nLess is closed by typing <code>q</code>.\nVi is closed by typing <code>:q</code> after another.\nNano is closed by pressing <code>ctrl + x</code></p>\n<p>Sometimes you also just</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">history</span> <span class=\"token comment\"># shows you the last commands you entered</span>\n<span class=\"token function\">grep</span> <span class=\"token punctuation\">[</span>filter<span class=\"token punctuation\">]</span> <span class=\"token comment\"># filters the input by a filter</span>\n<span class=\"token operator\">|</span> <span class=\"token comment\"># &lt; is called pipe and allows you to give the output of a command as inuput to another command</span>\n<span class=\"token function\">history</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token function\">rsync</span> <span class=\"token comment\"># search through the history of commands for rsync</span>\n<span class=\"token comment\"># this is very useful when you don't remember the exact syntax of a command you already used</span>\n<span class=\"token function\">man</span> <span class=\"token comment\"># open the manual for a command</span>\n<span class=\"token function\">man</span> <span class=\"token function\">ls</span> <span class=\"token comment\"># close by pressing 'q'</span>\n\n<span class=\"token function\">ls</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span><span class=\"token comment\"># list the current or given directory contents</span>\n<span class=\"token function\">ls</span> -lah <span class=\"token comment\"># same as above with output options; see ls --help</span>\n\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span> <span class=\"token comment\"># change directory to path or to user home (without path)</span>\n<span class=\"token function\">mkdir</span> dirName <span class=\"token comment\"># make a directory with name dirName</span>\n<span class=\"token function\">touch</span> <span class=\"token function\">file</span> <span class=\"token comment\"># create a file or more specifically update its last-changed timestamp, but creating the file if it does not exist</span>\n\n<span class=\"token function\">cat</span> <span class=\"token function\">file</span> <span class=\"token comment\"># output the contents of the file to the console</span>\n<span class=\"token function\">mv</span> from/file1 <span class=\"token punctuation\">[</span>from/file2<span class=\"token punctuation\">]</span> to <span class=\"token comment\"># move one or more files to another directory</span>\n<span class=\"token function\">cp</span> from/file1 <span class=\"token punctuation\">[</span>from/file2<span class=\"token punctuation\">]</span> to <span class=\"token comment\"># copy one or more files to another directory</span>\n\n<span class=\"token function\">sudo</span> <span class=\"token builtin class-name\">command</span> <span class=\"token comment\"># run command with administrator rights, usually asks for password</span>\n<span class=\"token comment\"># be careful using this</span>\n\n<span class=\"token comment\"># install packages on different systems</span>\n<span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token comment\"># debian-based</span>\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token comment\"># newer version of apt-get</span>\nyum <span class=\"token function\">install</span> <span class=\"token comment\"># centos package manager</span>\napk <span class=\"token function\">add</span> <span class=\"token comment\"># alpine linux</span>\n<span class=\"token comment\"># these are just some of the package managers bundled with the systems</span>\n<span class=\"token comment\"># there are a lot more</span>\nbrew <span class=\"token comment\"># macos</span>\n<span class=\"token function\">npm</span> <span class=\"token comment\"># for node packages</span>\npip <span class=\"token comment\"># for python packages</span>\n</code></pre>\n<p>Some of these can be annoying to type out all the time. That's why you should <a href=\"/TODO\">personalize</a> your command line, create shortcuts and aliases.</p>\n"}